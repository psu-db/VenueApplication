<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="userWallet_INSERT" xml:space="preserve">
    <value>INSERT INTO user_wallet(wallet_user_id)
SELECT user_id FROM inserted_user;</value>
  </data>
  <data name="userLoginCreds_INSERT" xml:space="preserve">
    <value>inserted_credentials AS (
    INSERT INTO login_credentials(lgn_user_id, lgn_username, lgn_password, lgn_email)
    VALUES ((SELECT user_id FROM inserted_user), @username, @password, @email)
)</value>
  </data>
  <data name="userCreate_INSERT" xml:space="preserve">
    <value>WITH inserted_user AS (
    INSERT INTO app_user(user_fname, user_lname, user_birthday, user_balance, user_type)
    VALUES (@firstname, @lastname, @birthday, @balance, @type)
    RETURNING user_id
),
--[INSERT LOGINCREDS]
--[INSERT WALLET]</value>
  </data>
  <data name="userLogin_SELECT" xml:space="preserve">
    <value>SELECT * FROM login_credentials JOIN user_wallet
ON user_wallet.wallet_user_id = login_credentials.lgn_user_id JOIN app_user ON app_user.user_id = user_wallet.wallet_user_id
WHERE lgn_username = @username AND lgn_password = @password;</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="beaverStaidumLoginBackgroundImage.webp" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\beaverStaidumLoginBackgroundImage.webp.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="pngtree-avatar-icon-profile-member-login-vector-isolated-silhouette-transparent-png-image_7111828" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\pngtree-avatar-icon-profile-member-login-vector-isolated-silhouette-transparent-png-image_71118281.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="paymentMethod_INSERT" xml:space="preserve">
    <value>INSERT INTO Payment_info(pymt_info_user_id, pymt_info_type, pymt_info_card_number, pymt_info_card_cvv, pymt_info_expiration_date, pymt_info_address, pymt_info_address_state, pymt_info_zipcode)
VALUES(@user_id, @card_type, @card_number, @card_cvv, @exp_date, @address, @state, @zipcode); </value>
  </data>
  <data name="paymentMethods_SELECT" xml:space="preserve">
    <value>SELECT * FROM payment_info
WHERE pymt_info_user_id = @user_id;</value>
  </data>
  <data name="eventCreate_INSERT" xml:space="preserve">
    <value>INSERT INTO venue_event(event_date, event_time, event_type, event_description)
VALUES(@eventdate, @eventtime, @eventtype, @eventdescription);</value>
  </data>
  <data name="venue_events_SELECT" xml:space="preserve">
    <value>SELECT * FROM venue_event;</value>
  </data>
  <data name="eventCreate_UPDATE" xml:space="preserve">
    <value>UPDATE venue_event
SET event_date = @eventdate, event_time = @eventtime, event_type = @eventtype, event_description = @eventdescription
WHERE event_id = @eventid;</value>
  </data>
  <data name="ticketCreate_BULKINSERT" xml:space="preserve">
    <value>INSERT INTO venue_ticket (tkt_event_id, tkt_section, tkt_row, tkt_seat_num, tkt_price, tkt_status)
SELECT 
    @eventid,
    @ticketsection,
    rows.row_number,
    seats.seat_number, 
    @ticketprice,
    @ticketstatus
FROM 
    generate_series(1, 5) AS rows(row_number),
    generate_series(1, 5) AS seats(seat_number);</value>
  </data>
  <data name="ticketsForEvent_SELECT" xml:space="preserve">
    <value>SELECT * FROM venue_ticket WHERE tkt_event_id = @event_id AND tkt_status = @status1 OR tkt_status = @status2;</value>
  </data>
  <data name="ticketCreate_DELETE" xml:space="preserve">
    <value>DELETE FROM venue_ticket
WHERE tkt_id = @tktid;</value>
  </data>
  <data name="ticketCreate_SCAN" xml:space="preserve">
    <value>UPDATE venue_ticket
SET tkt_status = 'SCN'
WHERE tkt_id = @tktid
AND (tkt_status = 'SLD' OR tkt_status = 'RSD');</value>
  </data>
  <data name="storeCreate_INSERT" xml:space="preserve">
    <value>INSERT INTO venue_store(store_name, store_section_location, store_type)
VALUES(@storename, @storesectionlocation, @storetype);</value>
  </data>
  <data name="itemCreate_INSERT" xml:space="preserve">
    <value>INSERT INTO venue_item(item_name,item_price,item_store_id)
VALUES(@itemname, @itemprice,@itemstoreid);</value>
  </data>
  <data name="transactionCreate_INSERT" xml:space="preserve">
    <value>INSERT INTO venue_transaction(trans_pymt_info_id, trans_event_id, trans_timestamp, trans_quantity, trans_item_id)
VALUES(@transpymtinfoid, @transeventid, @transtimestamp, @transquantity, @transitemid);</value>
  </data>
  <data name="venue_stores_SELECT" xml:space="preserve">
    <value>SELECT * FROM venue_store;</value>
  </data>
  <data name="storeCreate_UPDATE" xml:space="preserve">
    <value>UPDATE venue_store
SET store_name = @storename, store_section_location = @storesectionlocation, store_type = @storetype
WHERE store_id = @storeid;</value>
  </data>
  <data name="store_DELETE" xml:space="preserve">
    <value>DELETE FROM venue_store WHERE store_id = @storeid;</value>
  </data>
  <data name="item_UPDATE" xml:space="preserve">
    <value>UPDATE venue_item
SET item_name = @itemname, item_price = @itemprice
WHERE item_id = @itemid AND item_store_id = @itemstoreid;</value>
  </data>
  <data name="item_DELETE" xml:space="preserve">
    <value>DELETE FROM venue_item
WHERE item_id = @itemid;</value>
  </data>
  <data name="item_on_store_SELECT" xml:space="preserve">
    <value>SELECT * FROM venue_item
WHERE item_store_id = @itemstoreid;</value>
  </data>
  <data name="ticketPurchase_INSERT" xml:space="preserve">
    <value>INSERT INTO ticket_purchase(tktpur_tkt_id, tktpur_date, tktpur_wallet_id)
VALUES(@ticket_id, @ticket_pur_date, @ticket_wallet_id);

UPDATE venue_ticket
SET tkt_status = @ticket_status
WHERE tkt_id = @ticket_id;</value>
  </data>
  <data name="ticketPurchase_SELECT" xml:space="preserve">
    <value>SELECT * 
FROM ticket_purchase 
JOIN venue_ticket ON tktpur_tkt_id = tkt_id
WHERE tktpur_wallet_id = @wallet_id AND (tkt_status != 'SCN' AND tkt_status != 'RSL');</value>
  </data>
  <data name="ticketPurchase_SELECTSCANNED" xml:space="preserve">
    <value>SELECT * FROM ticket_purchase JOIN venue_ticket ON tktpur_tkt_id = tkt_id
WHERE tktpur_wallet_id = @wallet_id AND tkt_status = 'SCN';</value>
  </data>
  <data name="myTickets_UPDATE" xml:space="preserve">
    <value>UPDATE venue_ticket
SET tkt_status = 'RSL'
WHERE tkt_id = @ticket_id;</value>
  </data>
  <data name="eventSelectTicketData_SELECT" xml:space="preserve">
    <value>SELECT COUNT(*) AS num_tickets_sold, SUM(tkt_price) AS total_ticket_revenue
FROM venue_ticket 
WHERE tkt_status = 'SCN'
AND tkt_event_id = @eventid;</value>
  </data>
  <data name="eventDataTransactions_SELECT" xml:space="preserve">
    <value>SELECT 
    lgn_email, 
    item_name, 
    store_name, 
    pymt_info_type, 
    SUM(item_price * trans_quantity) AS total_spent
FROM venue_transaction
JOIN payment_info ON trans_pymt_info_id = pymt_info_id
JOIN app_user ON pymt_info_user_id = user_id
JOIN venue_item ON trans_item_id = item_id
JOIN venue_store ON item_store_id = store_id
JOIN login_credentials ON lgn_user_id = user_id
WHERE trans_event_id = 6
GROUP BY 
    lgn_email, 
    item_name, 
    store_name, 
    pymt_info_type
ORDER BY total_spent DESC;</value>
  </data>
  <data name="close_event_DELETE" xml:space="preserve">
    <value>DELETE FROM venue_transaction
WHERE trans_event_id = @eventid;

DELETE from ticket_purchase
WHERE tktpur_tkt_id IN (SELECT tkt_id
   FROM venue_ticket
   WHERE tkt_event_id = @eventid);

DELETE FROM venue_ticket
WHERE tkt_event_id = @eventid;


DELETE FROM venue_event
WHERE event_id = @eventid;</value>
  </data>
  <data name="ticketSellerInfo_SELECT" xml:space="preserve">
    <value>SELECT app_user.user_id, venue_ticket.tkt_price FROM ticket_purchase JOIN venue_ticket
ON ticket_purchase.tktpur_tkt_id = venue_ticket.tkt_id JOIN
user_wallet ON ticket_purchase.tktpur_wallet_id = user_wallet.wallet_id JOIN app_user
ON app_user.user_id = user_wallet.wallet_user_id
WHERE venue_ticket.tkt_id = @ticket_id;</value>
  </data>
  <data name="ticketSellerBalance_UPDATE" xml:space="preserve">
    <value>UPDATE app_user
SET user_balance = user_balance + @ticket_sold_price
WHERE user_id = @user_id
RETURNING user_balance;</value>
  </data>
</root>